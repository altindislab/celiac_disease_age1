---
title: "Age 1 Microbiome Dataset Analysis"
output:
  html_document:
    toc: true
    toc_float: true
    fig_caption: true
    code_folding: show
---

```{r setup, message=FALSE, warning=FALSE}
suppressPackageStartupMessages({
    library(MicrobiotaProcess)
    library(phyloseq)
    library(ggplot2)
    library(tidyverse)
    library(vegan)
    library(coin)
    library(reshape2)
    library(ggnewscale)
    library(ggrepel)
    library(tibble)
    library(dplyr)
    library(RColorBrewer)
})

# Define color palette for all groups
group_colors <- c(
    "IGneg_Control_1" = "#00AED7",   # Light blue
    "IGneg_Celiac_1" = "#FD9347",    # Orange
    "IGpos_Control_1" = "#2E8B57",    # Sea green
    "IGpos_Celiac_1" = "#E41A1C",     # Red
    "Presort_Control_1" = "#984EA3",  # Purple
    "Presort_Celiac_1" = "#FF7F00"    # Dark orange
)
```

# Import and filter data for Age 1

```{r load_data, message=FALSE, warning=FALSE}
# Import data
otuda <- read.table("./CD_data/cd_asv_table.txt", header=TRUE, 
                    check.names=FALSE, comment.char="", row.names=1, sep="\t")
otuda <- data.frame(t(otuda), check.names=FALSE)
sampleda <- read.table("./CD_data/cd_meta.txt", header=TRUE, 
                       row.names=1, check.names=FALSE, comment.char="")
taxda <- read.table("./CD_data/cd_taxa.txt", header=TRUE, 
                    row.names=1, check.names=FALSE, comment.char="")

# Filter for Age 1 samples
sampleda <- sampleda[sampleda$Age == "1year", ]
otuda <- otuda[rownames(sampleda), ]
taxda <- taxda[match(colnames(otuda), rownames(taxda)), ]

# Convert to matrices
otu_matrix <- as.matrix(otuda)
#tax_matrix <- as.matrix(taxda)

# Create phyloseq object
#OTU <- phyloseq::otu_table(otu_matrix, taxa_are_rows=FALSE)
#TAX <- phyloseq::tax_table(tax_matrix)
#samples <- phyloseq::sample_data(sampleda)
#rownames(samples) <- rownames(sampleda)

# Combine into phyloseq object
#psraw <- phyloseq::phyloseq(OTU, TAX, samples)
library(phyloseq)

# Ensure taxda only includes the taxa present in otuda
taxda <- taxda[match(colnames(otuda), rownames(taxda)), ]

# Check the dimensions after subsetting
cat("Dimensions of taxda after subsetting:", dim(taxda), "\n")

# Check if there are any NA values in row names after subsetting
if (any(is.na(rownames(taxda)))) {
  stop("Some taxa in otuda were not found in taxda.")
}

# Convert taxda to matrix if not already done
taxda <- as.matrix(taxda)

# Create the phyloseq object
psraw <- phyloseq(
  otu_table(otuda, taxa_are_rows = FALSE),
  sample_data(sampleda),
  phyloseq::tax_table(taxda)  # Use tax_table to create taxonomyTable directly
)

# Remove samples with low reads
#psraw <- phyloseq::prune_samples(phyloseq::sample_sums(psraw) >= sort(rowSums(phyloseq::otu_table(psraw)))[2], psraw)

# Rarefy to even depth
#et.seed(1024)
#ps <- phyloseq::rarefy_even_depth(psraw)
#print(ps)
```

```{r filtering}
# Step 1: Remove extremely rare taxa first
ps_filtered <- psraw %>%
  # Keep taxa present in at least 2 samples
  filter_taxa(function(x) sum(x > 0) >= 2, TRUE) %>%
  # Keep taxa with at least 10 reads total across all samples
  filter_taxa(function(x) sum(x) >= 10, TRUE)

# Print stats after initial filtering
print("After initial filtering:")
print(ntaxa(ps_filtered))

# Step 2: Remove low prevalence taxa
ps_filtered_prev <- ps_filtered %>%
  # Present in at least 5% of samples
  filter_taxa(function(x) sum(x > 0) >= (0.05 * nsamples(.)), TRUE)

print("After prevalence filtering:")
print(ntaxa(ps_filtered_prev))

# Step 3: Transform to relative abundance
ps_rel <- transform_sample_counts(ps_filtered_prev, function(x) x/sum(x))

# Step 4: Optional rarefaction for certain analyses
set.seed(1024)  # For reproducibility
ps_rarefied <- rarefy_even_depth(ps_filtered_prev, 
                                sample.size = 18000,  # Based on your minimum depth
                                rngseed = TRUE)

print(ntaxa(ps_rarefied))

```

# Differential Abundance Analysis with All Contrasts

```{r differential_analysis, message=FALSE, warning=FALSE}

##USE ps_rel in here!!
# Function to perform Mann-Whitney tests for specific contrasts
perform_differential_analysis <- function(physeq) {
  # Extract tax_table and abundance data from phyloseq object
  tax_table_df <- as.data.frame(phyloseq::tax_table(physeq))  # Convert to data frame
  abundance_matrix <- as.matrix(phyloseq::otu_table(physeq))  # OTU table matrix
  metadata_df <- as.data.frame(phyloseq::sample_data(physeq))  # Sample metadata

  # Add full taxonomy information to tax_table
  tax_table_df$full_taxonomy <- apply(tax_table_df, 1, function(x) {
    paste(na.omit(x[c("Phylum", "Class", "Order", "Family", "Genus")]), collapse = "; ")
  })

  # Define contrasts for differential analysis
  contrasts <- list(
    Celiac_vs_Control_Presort_Age1 = list(group1 = "Presort_Celiac_1", group2 = "Presort_Control_1"),
    Celiac_vs_Control_IGneg_Age1 = list(group1 = "IGneg_Celiac_1", group2 = "IGneg_Control_1"),
    Celiac_vs_Control_IGpos_Age1 = list(group1 = "IGpos_Celiac_1", group2 = "IGpos_Control_1"),
    IGpos_vs_IGneg_Control_Age1 = list(group1 = "IGpos_Control_1", group2 = "IGneg_Control_1"),
    IGpos_vs_IGneg_Celiac_Age1 = list(group1 = "IGpos_Celiac_1", group2 = "IGneg_Celiac_1")
  )

  # Helper function to calculate fold change
  calculate_fold_change <- function(group1_values, group2_values) {
    median_group1 <- median(group1_values)
    median_group2 <- median(group2_values)
    median_diff <- median_group1 - median_group2

    # Avoid division by zero for fold change calculation
    if (median_group2 == 0) {
      log2_fc <- ifelse(median_group1 == 0, 0, log2(median_group1 + 1e-6))
    } else {
      log2_fc <- log2((median_group1 + 1e-6) / (median_group2 + 1e-6))
    }

    return(c(median_diff, log2_fc))
  }

  results_list <- list()

  for (contrast_name in names(contrasts)) {
    contrast <- contrasts[[contrast_name]]

    # Initialize results matrix
    results <- matrix(NA, nrow = ncol(abundance_matrix), ncol = 7)
    colnames(results) <- c("pvalue", "padj", "log2FoldChange", "median_group1", "median_group2", "median_difference", "effect_size")
    rownames(results) <- colnames(abundance_matrix)

    # Get samples for each group
    group1_samples <- metadata_df$Group == contrast$group1
    group2_samples <- metadata_df$Group == contrast$group2

    # Loop through each taxon
    for (i in 1:ncol(abundance_matrix)) {
      group1_abundance <- abundance_matrix[group1_samples, i]
      group2_abundance <- abundance_matrix[group2_samples, i]

      # Skip if insufficient data
      if (length(group1_abundance) < 3 || length(group2_abundance) < 3) {
        next
      }

      # Check if there are enough unique values for a meaningful test
      unique_values <- length(unique(c(group1_abundance, group2_abundance)))
      if (unique_values < 2) {
        next
      }

      # Perform Mann-Whitney test with error handling
      tryCatch({
        test <- wilcox.test(group1_abundance, group2_abundance, alternative = "two.sided", exact = FALSE)

        # Calculate effect sizes
        effects <- calculate_fold_change(group1_abundance, group2_abundance)

        # Calculate Cliff's Delta
        n1 <- length(group1_abundance)
        n2 <- length(group2_abundance)
        dominance <- sum(outer(group1_abundance, group2_abundance, ">")) - sum(outer(group1_abundance, group2_abundance, "<"))
        cliff_delta <- dominance / (n1 * n2)

        # Store results
        results[i, "pvalue"] <- test$p.value
        results[i, "median_group1"] <- median(group1_abundance)
        results[i, "median_group2"] <- median(group2_abundance)
        results[i, "median_difference"] <- effects[1]
        results[i, "log2FoldChange"] <- effects[2]
        results[i, "effect_size"] <- cliff_delta
      }, error = function(e) {
        results[i, ] <- NA
      })
    }

    # Adjust p-values for multiple testing
    valid_rows <- !is.na(results[, "pvalue"])
    if (sum(valid_rows) > 0) {
      results[valid_rows, "padj"] <- p.adjust(results[valid_rows, "pvalue"], method = "BH")
    }

    # Create results data frame
    results_df <- data.frame(
      Genus = tax_table_df$Genus,
      fullTaxonomy = tax_table_df$full_taxonomy,
      results,
      stringsAsFactors = FALSE
    )

    results_df$Contrast <- contrast_name
    results_df$Group1 <- contrast$group1
    results_df$Group2 <- contrast$group2

    # Create volcano plot
    plot_df <- results_df[!is.na(results_df$padj) & !is.na(results_df$log2FoldChange), ]
    plot_df$Significant <- ifelse(plot_df$padj < 0.05, "Significant", "Not Significant")

    p <- ggplot(plot_df, aes(x = log2FoldChange, y = -log10(padj))) +
      geom_point(aes(color = Significant, size = abs(effect_size)), alpha = 0.7) +
      scale_color_manual(values = c("grey60", "red2")) +
      scale_size_continuous(range = c(1, 4)) +
      theme_bw() +
      labs(title = paste("Differential Abundance -", contrast_name),
           subtitle = paste("Group1:", contrast$group1, "\nGroup2:", contrast$group2),
           x = "log2 Fold Change",
           y = "-log10(adjusted p-value)",
           size = "Effect Size") +
      geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "grey40") +
      geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "grey40") +
      theme(legend.position = "right",
            plot.title = element_text(size = 12, face = "bold"),
            plot.subtitle = element_text(size = 10))

    # Add labels for significant taxa
    significant_taxa <- plot_df[plot_df$padj < 0.05 & abs(plot_df$log2FoldChange) > 1, ]
    if (nrow(significant_taxa) > 0) {
      p <- p + geom_text_repel(data = significant_taxa, aes(label = Genus), size = 3, max.overlaps = 15, box.padding = 0.5)
    }

    # Save volcano plot and results
    ggsave(paste0("volcano_", gsub(" ", "_", contrast_name), ".pdf"), p, width = 10, height = 8)
    write.csv(results_df, paste0("differential_abundance_", gsub(" ", "_", contrast_name), ".csv"), row.names = FALSE)

    results_list[[contrast_name]] <- results_df
  }

  # Combine all results into a single data frame
  all_results <- do.call(rbind, results_list)

  # Generate summary statistics
  summary_stats <- all_results %>%
    filter(!is.na(padj) & padj < 0.05) %>%
    group_by(Contrast) %>%
    summarise(
      Total_Significant = n(),
      Strong_Increase = sum(log2FoldChange > 1, na.rm = TRUE),
      Strong_Decrease = sum(log2FoldChange < -1, na.rm = TRUE),
      Moderate_Change = sum(abs(log2FoldChange) <= 1, na.rm = TRUE),
      Mean_Effect_Size = mean(abs(effect_size), na.rm = TRUE)
    )

  # Save summary statistics
  write.csv(all_results, "differential_abundance_all_contrasts.csv", row.names = FALSE)
  write.csv(summary_stats, "differential_abundance_summary.csv", row.names = FALSE)

  return(list(results = results_list, summary = summary_stats))
}

# Run the differential analysis
diff_abundance_results <- perform_differential_analysis(ps_rel)

# Print summary of results
cat("\nSummary of Differential Abundance Analysis:\n")
print(diff_abundance_results$summary)

# Print detailed results for each contrast
for (contrast_name in names(diff_abundance_results$results)) {
  cat(sprintf("\n\nSignificant genera for %s:\n", contrast_name))
  results <- diff_abundance_results$results[[contrast_name]]
  sig_results <- results[!is.na(results$padj) & results$padj < 0.05 & abs(results$log2FoldChange) > 1, ]

  if (nrow(sig_results) > 0) {
    sig_results <- sig_results[order(sig_results$padj), ]
    print(sig_results %>%
            select(Genus, fullTaxonomy, log2FoldChange, padj, effect_size) %>%
            arrange(padj))
  } else {
    cat("No significant genera found with adjusted p < 0.05 and |log2FC| > 1\n")
  }
}
```

```{r}
### Alpha and Beta Diversity Presort

# Load required libraries
library(ggplot2)
library(phyloseq)
library(dplyr)
library(vegan)
library(patchwork)

# Function to create alpha diversity plot
create_alpha_plot <- function(ps_obj) {
  # Calculate alpha diversity metrics
  alpha_div <- estimate_richness(ps_obj, measures = "Observed")
  
  # Add metadata information
  alpha_div$Disease.status <- sample_data(ps_obj)$Disease.status
  alpha_div$Disease.status <- factor(alpha_div$Disease.status, levels = c("Control", "Celiac"))
  
  # Create the box plot
  p <- ggplot(alpha_div, aes(x = Disease.status, y = Observed, fill = Disease.status)) +
    geom_boxplot(outlier.shape = 19, outlier.size = 1.5) +
    scale_fill_manual(values = c("Control" = "#00AED7", "Celiac" = "#FD9347")) +
    labs(
      title = "Observed ASV",
      y = "Alpha Diversity\n(ASV)",
      x = ""
    ) +
    theme_bw() +
    theme(
      panel.grid.major.x = element_blank(),
      panel.grid.minor = element_blank(),
      legend.position = "none",
      plot.title = element_text(size = 12, face = "bold", hjust = 0),
      axis.text = element_text(size = 10),
      axis.title = element_text(size = 11)
    )
  
  # Perform statistical test
  stat_test <- wilcox.test(Observed ~ Disease.status, data = alpha_div, exact = FALSE)
  
  # Add p-value annotation if significant
  if (stat_test$p.value < 0.05) {
    sig_symbol <- if(stat_test$p.value < 0.001) "***"
    else if(stat_test$p.value < 0.01) "**"
    else "*"
    
    y_pos <- max(alpha_div$Observed) * 1.1
    p <- p + 
      geom_segment(aes(x = 1, xend = 2, y = y_pos, yend = y_pos)) +
      geom_text(aes(x = 1.5, y = y_pos * 1.05), label = sig_symbol)
  }
  
  return(list(plot = p, statistics = data.frame(
    test = "Wilcoxon",
    statistic = stat_test$statistic,
    p_value = stat_test$p.value
  )))
}

# Function to create Bray-Curtis analysis with PERMANOVA
create_beta_analysis <- function(ps_obj) {
  # Calculate Bray-Curtis distances
  bc_dist <- phyloseq::distance(ps_obj, method = "bray")
  
  # Get metadata
  meta <- data.frame(sample_data(ps_obj))
  
  # Perform PERMANOVA
  permanova_result <- adonis2(bc_dist ~ Disease.status, data = meta, permutations = 999)
  
  # Create distance matrix
  dist_matrix <- as.matrix(bc_dist)
  
  # Function to extract between-group distances
  get_between_group_distances <- function(dist_matrix, meta) {
    distances <- data.frame(
      Distance = numeric(),
      Disease.status = character()
    )
    
    # Get distances within Control group
    control_samples <- rownames(meta)[meta$Disease.status == "Control"]
    if(length(control_samples) >= 2) {
      control_dist <- dist_matrix[control_samples, control_samples]
      control_dist <- control_dist[upper.tri(control_dist)]
      distances <- rbind(distances, 
                         data.frame(Distance = control_dist,
                                    Disease.status = "Control"))
    }
    
    # Get distances within Celiac group
    celiac_samples <- rownames(meta)[meta$Disease.status == "Celiac"]
    if(length(celiac_samples) >= 2) {
      celiac_dist <- dist_matrix[celiac_samples, celiac_samples]
      celiac_dist <- celiac_dist[upper.tri(celiac_dist)]
      distances <- rbind(distances, 
                         data.frame(Distance = celiac_dist,
                                    Disease.status = "Celiac"))
    }
    
    distances$Disease.status <- factor(distances$Disease.status, 
                                       levels = c("Control", "Celiac"))
    return(distances)
  }
  
  # Get distances
  bc_distances <- get_between_group_distances(dist_matrix, meta)
  
  # Create box plot
  p <- ggplot(bc_distances, aes(x = Disease.status, y = Distance, fill = Disease.status)) +
    geom_boxplot(outlier.shape = 19, outlier.size = 1.5) +
    scale_fill_manual(values = c("Control" = "#00AED7", "Celiac" = "#FD9347")) +
    labs(
      title = "Bray-Curtis Dissimilarity",
      subtitle = sprintf("PERMANOVA R² = %.3f, p = %.3f", 
                         permanova_result$R2[1], 
                         permanova_result$`Pr(>F)`[1]),
      y = "Distance",
      x = ""
    ) +
    theme_bw() +
    theme(
      panel.grid.major.x = element_blank(),
      panel.grid.minor = element_blank(),
      legend.position = "none",
      plot.title = element_text(size = 12, face = "bold", hjust = 0),
      plot.subtitle = element_text(size = 10, hjust = 0),
      axis.text = element_text(size = 10),
      axis.title = element_text(size = 11)
    )
  
  # Perform within-group statistical test
  stat_test <- wilcox.test(Distance ~ Disease.status, data = bc_distances, exact = FALSE)
  
  # Add p-value annotation if significant
  if (stat_test$p.value < 0.05) {
    sig_symbol <- if(stat_test$p.value < 0.001) "***"
    else if(stat_test$p.value < 0.01) "**"
    else "*"
    
    y_pos <- max(bc_distances$Distance) * 1.1
    p <- p + 
      geom_segment(aes(x = 1, xend = 2, y = y_pos, yend = y_pos)) +
      geom_text(aes(x = 1.5, y = y_pos * 1.05), label = sig_symbol)
  }
  
  # Test for homogeneity of dispersion
  disp <- betadisper(bc_dist, meta$Disease.status)
  disp_test <- permutest(disp, permutations = 999)
  
  return(list(
    plot = p,
    statistics = list(
      permanova = permanova_result,
      within_group_test = data.frame(
        test = "Wilcoxon",
        statistic = stat_test$statistic,
        p_value = stat_test$p.value
      ),
      dispersion_test = disp_test
    )
  ))
}

# Create both analyses
alpha_results <- create_alpha_plot(ps_filtered_prev)
beta_results <- create_beta_analysis(ps_filtered_prev)

# Combine plots vertically
combined_plot <- alpha_results$plot / beta_results$plot +
  plot_layout(heights = c(1, 1))

# Save the combined plot
ggsave("alpha_beta_diversity_boxplots.pdf", combined_plot, width = 6, height = 8, dpi = 300)

# Save individual plots
ggsave("alpha_diversity_boxplot.pdf", alpha_results$plot, width = 6, height = 4, dpi = 300)
ggsave("beta_diversity_boxplot.pdf", beta_results$plot, width = 6, height = 4, dpi = 300)

# Save statistical results
statistical_summary <- list(
  alpha_diversity = alpha_results$statistics,
  beta_diversity = beta_results$statistics
)

# Write statistical results to a file
sink("diversity_analysis_statistics.txt")
cat("Alpha Diversity Analysis:\n")
print(alpha_results$statistics)
cat("\nBeta Diversity Analysis:\n")
cat("\nPERMANOVA Results:\n")
print(beta_results$statistics$permanova)
cat("\nWithin-group Distance Test:\n")
print(beta_results$statistics$within_group_test)
cat("\nDispersion Homogeneity Test:\n")
print(beta_results$statistics$dispersion_test)
sink()


### Alpha and Beta Diversity Post Sort

# Load required libraries
library(ggplot2)
library(phyloseq)
library(dplyr)
library(vegan)
library(patchwork)

#' Create Alpha Diversity Plot
#'
#' @param ps_obj Phyloseq object containing the microbiome data
#' @param sort_type Character string specifying the sort type (IGneg or IGpos)
#' @return List containing plot object and statistical results
#' @details Creates box plots of alpha diversity metrics and performs statistical tests
create_alpha_plot <- function(ps_obj, sort_type) {
  # Filter for specific sort type
  ps_subset <- subset_samples(ps_obj, Sort %in% sort_type)
  
  # Calculate alpha diversity metrics
  alpha_div <- estimate_richness(ps_subset, measures = c("Observed", "Shannon", "Simpson"))
  
  # Add metadata information
  alpha_div$Disease.status <- sample_data(ps_subset)$Disease.status
  alpha_div$Sort <- sample_data(ps_subset)$Sort
  alpha_div$Disease.status <- factor(alpha_div$Disease.status, levels = c("Control", "Celiac"))
  
  # Create the box plot with consistent color scheme
  p <- ggplot(alpha_div, aes(x = Disease.status, y = Observed, fill = Disease.status)) +
    geom_boxplot(outlier.shape = 19, outlier.size = 1.5) +
    geom_jitter(width = 0.2, alpha = 0.5) +  # Add individual points
    scale_fill_manual(values = c("Control" = "#00AED7", "Celiac" = "#FD9347")) +
    labs(
      title = paste("Observed ASV -", sort_type),
      y = "Alpha Diversity\n(ASV)",
      x = ""
    ) +
    theme_bw() +
    theme(
      panel.grid.major.x = element_blank(),
      panel.grid.minor = element_blank(),
      legend.position = "none",
      plot.title = element_text(size = 12, face = "bold", hjust = 0),
      axis.text = element_text(size = 10),
      axis.title = element_text(size = 11)
    )
  
  # Perform statistical tests for each diversity measure
  measures <- c("Observed", "Shannon", "Simpson")
  stats_results <- data.frame()
  
  for(measure in measures) {
    # Wilcoxon test
    test <- wilcox.test(alpha_div[[measure]] ~ alpha_div$Disease.status, exact = FALSE)
    
    # Calculate effect size (Cliff's Delta)
    control_vals <- alpha_div[[measure]][alpha_div$Disease.status == "Control"]
    celiac_vals <- alpha_div[[measure]][alpha_div$Disease.status == "Celiac"]
    
    n1 <- length(control_vals)
    n2 <- length(celiac_vals)
    dominance <- sum(outer(control_vals, celiac_vals, ">")) - 
      sum(outer(control_vals, celiac_vals, "<"))
    cliff_delta <- dominance / (n1 * n2)
    
    stats_results <- rbind(stats_results, data.frame(
      sort_type = sort_type,
      measure = measure,
      statistic = test$statistic,
      p_value = test$p.value,
      cliff_delta = cliff_delta,
      control_mean = mean(control_vals),
      control_sd = sd(control_vals),
      celiac_mean = mean(celiac_vals),
      celiac_sd = sd(celiac_vals)
    ))
  }
  
  # Save statistical test results
  write.csv(stats_results, 
            paste0("alpha_diversity_statistics_", sort_type, ".csv"), 
            row.names = FALSE)
  
  # Add p-value annotation if significant
  if (stats_results$p_value[1] < 0.05) {  # For Observed diversity
    sig_symbol <- if(stats_results$p_value[1] < 0.001) "***"
    else if(stats_results$p_value[1] < 0.01) "**"
    else "*"
    
    y_pos <- max(alpha_div$Observed) * 1.1
    p <- p + 
      geom_segment(aes(x = 1, xend = 2, y = y_pos, yend = y_pos)) +
      geom_text(aes(x = 1.5, y = y_pos * 1.05), 
                label = sig_symbol)
  }
  
  return(list(plot = p, stats = stats_results))
}

#' Create Bray-Curtis Analysis
#'
#' @param ps_obj Phyloseq object containing the microbiome data
#' @param sort_type Character string specifying the sort type (IGneg or IGpos)
#' @return List containing plot object and statistical results
#' @details Performs beta diversity analysis using Bray-Curtis dissimilarity
create_bray_curtis_analysis <- function(ps_obj, sort_type) {
  # Filter for specific sort type
  ps_subset <- subset_samples(ps_obj, Sort %in% sort_type)
  
  # Calculate Bray-Curtis distances
  bc_dist <- phyloseq::distance(ps_subset, method = "bray")
  
  # Get metadata
  meta <- data.frame(sample_data(ps_subset))
  
  # Perform PERMANOVA
  permanova_result <- adonis2(bc_dist ~ Disease.status, data = meta, permutations = 999)
  
  # Perform betadisper test for homogeneity of dispersion
  beta_disper <- betadisper(bc_dist, meta$Disease.status)
  disper_test <- permutest(beta_disper, permutations = 999)
  
  # Extract within-group and between-group distances
  dist_matrix <- as.matrix(bc_dist)
  
  # Calculate within-group distances
  control_samples <- meta$Disease.status == "Control"
  celiac_samples <- meta$Disease.status == "Celiac"
  
  within_control <- dist_matrix[control_samples, control_samples][upper.tri(dist_matrix[control_samples, control_samples])]
  within_celiac <- dist_matrix[celiac_samples, celiac_samples][upper.tri(dist_matrix[celiac_samples, celiac_samples])]
  between_groups <- dist_matrix[control_samples, celiac_samples]
  
  # Prepare data for plotting
  plot_data <- data.frame(
    Distance = c(within_control, within_celiac),
    Group = factor(c(rep("Control", length(within_control)),
                     rep("Celiac", length(within_celiac))),
                   levels = c("Control", "Celiac"))
  )
  
  # Create box plot
  p <- ggplot(plot_data, aes(x = Group, y = Distance, fill = Group)) +
    geom_boxplot(outlier.shape = 19, outlier.size = 1.5) +
    geom_jitter(width = 0.2, alpha = 0.5) +
    scale_fill_manual(values = c("Control" = "#00AED7", "Celiac" = "#FD9347")) +
    labs(
      title = paste("Bray-Curtis Dissimilarity -", sort_type),
      subtitle = paste("PERMANOVA R² =", round(permanova_result$R2[1], 3),
                       ", p =", format(permanova_result$`Pr(>F)`[1], digits = 3)),
      y = "Distance",
      x = ""
    ) +
    theme_bw() +
    theme(
      panel.grid.major.x = element_blank(),
      panel.grid.minor = element_blank(),
      legend.position = "none",
      plot.title = element_text(size = 12, face = "bold", hjust = 0),
      plot.subtitle = element_text(size = 10, hjust = 0),
      axis.text = element_text(size = 10),
      axis.title = element_text(size = 11)
    )
  
  # Save statistical results
  stats_results <- data.frame(
    sort_type = sort_type,
    test = c("PERMANOVA", "Dispersion"),
    statistic = c(permanova_result$F[1], disper_test$F[1]),
    R2 = c(permanova_result$R2[1], NA),
    p_value = c(permanova_result$`Pr(>F)`[1], disper_test$tab$`Pr(>F)`[1])
  )
  
  write.csv(stats_results,
            paste0("beta_diversity_statistics_", sort_type, ".csv"),
            row.names = FALSE)
  
  return(list(plot = p, stats = stats_results))
}

# Main analysis workflow
sort_types <- c("IGneg", "IGpos")
all_results <- list()

# Process each sort type
for (sort_type in sort_types) {
  # Run analyses
  alpha_results <- create_alpha_plot(ps_filtered_prev, sort_type)
  beta_results <- create_bray_curtis_analysis(ps_filtered_prev, sort_type)
  
  # Store results
  all_results[[sort_type]] <- list(
    alpha = alpha_results,
    beta = beta_results
  )
  
  # Create combined plot for this sort type
  combined_plot <- alpha_results$plot / beta_results$plot +
    plot_layout(heights = c(1, 1))
  
  # Save plots
  ggsave(
    paste0("diversity_analysis_", sort_type, ".pdf"),
    combined_plot,
    width = 6,
    height = 8,
    dpi = 300
  )
}

# Create final combined figure
combined_figure <- (all_results$IGneg$alpha$plot + all_results$IGpos$alpha$plot) /
  (all_results$IGneg$beta$plot + all_results$IGpos$beta$plot) +
  plot_layout(guides = "collect") +
  plot_annotation(
    title = "Diversity Analyses by Sort Type",
    theme = theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
  )

# Save combined figure
ggsave(
  "all_diversity_analyses.pdf",
  combined_figure,
  width = 12,
  height = 10,
  dpi = 300
)

# Create comprehensive statistical summary
alpha_stats <- do.call(rbind, lapply(all_results, function(x) x$alpha$stats))
beta_stats <- do.call(rbind, lapply(all_results, function(x) x$beta$stats))

write.csv(alpha_stats, "alpha_diversity_statistics_summary.csv", row.names = FALSE)
write.csv(beta_stats, "beta_diversity_statistics_summary.csv", row.names = FALSE)

```


###Firmicutes vs Bacteroidetes_Ratio
```{r}
# First, analyze at phylum level
ps_phylum <- tax_glom(ps_rel, taxrank="Phylum")
# Convert to relative abundance
ps_phylum_rel <- transform_sample_counts(ps_phylum, function(x) x/sum(x) * 100)

# Extract abundance matrix and taxonomy
otu_mat <- as(otu_table(ps_phylum_rel), "matrix")
if(taxa_are_rows(ps_phylum_rel)) {
  otu_mat <- t(otu_mat)
}
tax_mat <- as(phyloseq::tax_table(ps_phylum_rel), "matrix")
metadata <- data.frame(sample_data(ps_phylum_rel))

# Get Firmicutes and Bacteroidetes abundances
firmicutes_idx <- which(tax_mat[, "Phylum"] == "Firmicutes")
bacteroidetes_idx <- which(tax_mat[, "Phylum"] == "Bacteroidetes")

# Calculate F/B ratio
fb_ratio <- data.frame(
  Sample = rownames(otu_mat),
  Firmicutes = otu_mat[, firmicutes_idx],
  Bacteroidetes = otu_mat[, bacteroidetes_idx],
  stringsAsFactors = FALSE
)
fb_ratio$FB_Ratio <- fb_ratio$Firmicutes / fb_ratio$Bacteroidetes

# Add metadata by matching sample names
fb_ratio$Disease.status <- metadata[match(fb_ratio$Sample, rownames(metadata)), "Disease.status"]
fb_ratio$CellType <- metadata[match(fb_ratio$Sample, rownames(metadata)), "CellType"]

# Print first few rows to check
print(head(fb_ratio))

# Statistical testing
cell_types <- unique(fb_ratio$CellType)
stats_results <- data.frame()

for(cell_type in cell_types) {
  subset_data <- fb_ratio[fb_ratio$CellType == cell_type,]
  test <- wilcox.test(FB_Ratio ~ Disease.status, data=subset_data)
  
  stats_results <- rbind(stats_results, data.frame(
    CellType = cell_type,
    p_value = test$p.value,
    Control_median = median(subset_data$FB_Ratio[subset_data$Disease.status == "Control"]),
    Celiac_median = median(subset_data$FB_Ratio[subset_data$Disease.status == "Celiac"])
  ))
}
stats_results$adj_p_value <- p.adjust(stats_results$p_value, method="BH")

```

#Taxonomic Composition

```{r}
#use ps_filtered_prev with this
library(patchwork)
library(tidyverse)
library(RColorBrewer)
library(scales)

# First, add CellType to the sample data of ps_filtered_prev
# Extract sample data
sample_data <- data.frame(sample_data(ps_filtered_prev))

# Create CellType from Sort column
sample_data$CellType <- sapply(as.character(sample_data$Sort), function(x) {
  if(x == "Presort") return("Presort")
  else if(x == "IGneg") return("IGneg")
  else if(x == "IGpos") return("IGpos")
  else return(NA)
})

# Update the sample data in the phyloseq object
sample_data(ps_filtered_prev) <- sample_data(sample_data)

# Create a large, distinct color palette
create_color_palette <- function(n) {
    # Combine multiple color brewer palettes and make them distinct
    cols <- c(
        brewer.pal(8, "Set2"),
        brewer.pal(8, "Set1"),
        brewer.pal(8, "Dark2"),
        brewer.pal(8, "Paired"),
        brewer.pal(8, "Accent")
    )
    # Remove any duplicate colors
    cols <- unique(cols)
    # If we need more colors, interpolate between existing ones
    if(n > length(cols)) {
        cols <- colorRampPalette(cols)(n)
    }
    return(cols[1:n])
}

# Function to process taxonomy at a specific level
process_taxonomic_level <- function(ps_obj, tax_level, cell_type) {
    # Convert to relative abundance
    ps_rel <- transform_sample_counts(ps_obj, function(x) x/sum(x) * 100)
    
    # Agglomerate at specified level
    ps_agg <- tax_glom(ps_rel, taxrank=tax_level, NArm=FALSE)
    
    # Extract abundance and taxonomy
    otu_mat <- as(phyloseq::otu_table(ps_agg), "matrix")
    tax_mat <- as(phyloseq::tax_table(ps_agg), "matrix")
    
    if(taxa_are_rows(ps_agg)) {
        otu_mat <- t(otu_mat)
    }
    
    # Create proper labels
    tax_labels <- sapply(1:nrow(tax_mat), function(i) {
        if(!is.na(tax_mat[i, tax_level])) {
            if(tax_level == "Species") {
                # For species, include genus name if available
                genus <- tax_mat[i, "Genus"]
                species <- tax_mat[i, "Species"]
                if(!is.na(genus)) {
                    return(paste(genus, species))
                } else {
                    return(species)
                }
            } else {
                return(tax_mat[i, tax_level])
            }
        } else {
            # Find the last classified level
            prev_cols <- 1:which(colnames(tax_mat) == tax_level)
            prev_level_idx <- max(which(!is.na(tax_mat[i, prev_cols])))
            if(is.finite(prev_level_idx)) {
                prev_level_name <- colnames(tax_mat)[prev_level_idx]
                return(paste0("Unclassified_", tax_mat[i, prev_level_name]))
            } else {
                return("Unclassified")
            }
        }
    })
    
    # Make labels unique
    tax_labels <- make.unique(tax_labels, sep = "_")
    colnames(otu_mat) <- tax_labels
    
    # Get metadata
    metadata <- data.frame(sample_data(ps_agg))
    
    # Get top taxa (minimum abundance 0.1%)
    mean_abund <- colMeans(otu_mat)
    top_taxa <- names(sort(mean_abund[mean_abund > 0.1], decreasing=TRUE))
    
    if(length(top_taxa) == 0) {
        return(NULL)
    }
    
    # Prepare data for plotting
    plot_data <- data.frame(otu_mat[, top_taxa, drop=FALSE]) %>%
        mutate(Disease.status = metadata$Disease.status) %>%
        pivot_longer(-Disease.status, 
                    names_to = tax_level, 
                    values_to = "Abundance")
    
    # Perform Mann-Whitney tests
    test_results <- data.frame()
    for(taxon in top_taxa) {
        ctrl_values <- otu_mat[metadata$Disease.status == "Control", taxon]
        cel_values <- otu_mat[metadata$Disease.status == "Celiac", taxon]
        
        if(length(ctrl_values) >= 3 && length(cel_values) >= 3) {
            test <- wilcox.test(ctrl_values, cel_values, exact = FALSE)
            
            test_results <- rbind(test_results, data.frame(
                Taxon = taxon,
                Level = tax_level,
                p_value = test$p.value,
                Control_median = median(ctrl_values),
                Control_IQR = paste(round(quantile(ctrl_values, 0.25), 2), "-", 
                                  round(quantile(ctrl_values, 0.75), 2)),
                Celiac_median = median(cel_values),
                Celiac_IQR = paste(round(quantile(cel_values, 0.25), 2), "-", 
                                 round(quantile(cel_values, 0.75), 2)),
                log2FoldChange = log2((median(cel_values) + 1e-10)/(median(ctrl_values) + 1e-10))
            ))
        }
    }
    
    if(nrow(test_results) > 0) {
        test_results$adj_p_value <- p.adjust(test_results$p_value, method = "BH")
        test_results$CellType <- cell_type
    }
    
    # Create color palette
    n_taxa <- length(unique(plot_data[[tax_level]]))
    taxa_colors <- create_color_palette(n_taxa)
    names(taxa_colors) <- unique(plot_data[[tax_level]])
    
    # Create stacked bar plot
    mean_composition <- plot_data %>%
        group_by(Disease.status, .data[[tax_level]]) %>%
        summarise(Abundance = mean(Abundance), .groups = 'drop')
    
    p_stack <- ggplot(mean_composition, 
                     aes(x = Disease.status, 
                         y = Abundance, 
                         fill = .data[[tax_level]])) +
        geom_bar(stat = "identity", position = "stack") +
        scale_fill_manual(values = taxa_colors) +
        theme_bw() +
        theme(axis.text.x = element_text(angle = 45, hjust = 1),
              legend.text = element_text(size = 8),
              legend.position = "right",
              legend.key.size = unit(0.5, "cm")) +
        labs(title = paste(cell_type, "-", tax_level, "Composition"),
             x = "Disease Status",
             y = "Relative Abundance (%)",
             fill = tax_level)
    
    return(list(
        plot = p_stack,
        stats = test_results
    ))
}

# Create output directories
dir.create("plots", showWarnings = FALSE)
dir.create("stats", showWarnings = FALSE)

# Process all taxonomic levels for each cell type
cell_types <- c("Presort", "IGpos", "IGneg")
tax_levels <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
all_stats <- data.frame()
plot_list <- list()

# Print analysis progress
cat("Starting taxonomic analysis...\n")

for(cell_type in cell_types) {
    cat(sprintf("\nProcessing %s samples\n", cell_type))
    ps_subset <- subset_samples(ps_filtered_prev, CellType == cell_type)
    
    for(tax_level in tax_levels) {
        cat(sprintf("  Analyzing %s level...\n", tax_level))
        results <- process_taxonomic_level(ps_subset, tax_level, cell_type)
        
        if(!is.null(results)) {
            if(!is.null(results$stats)) {
                all_stats <- rbind(all_stats, results$stats)
            }
            plot_list[[paste(cell_type, tax_level)]] <- results$plot
        }
    }
}

# Save plots for each taxonomic level
cat("\nGenerating and saving plots...\n")

for(tax_level in tax_levels) {
    if(all(paste(cell_types, tax_level) %in% names(plot_list))) {
        # Combine plots for this level
        combined_plots <- plot_list[[paste("Presort", tax_level)]] + 
                         plot_list[[paste("IGpos", tax_level)]] + 
                         plot_list[[paste("IGneg", tax_level)]] +
            plot_layout(guides = "collect") +
            plot_annotation(
                title = paste(tax_level, "Level Composition"),
                theme = theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5))
            )
        
        # Save plot
        filename <- file.path("plots", paste0("taxonomic_composition_", tolower(tax_level), ".pdf"))
        ggsave(filename, combined_plots, width = 15, height = 8, dpi = 300)
        cat(sprintf("  Saved %s\n", filename))
    }
}

# Process and save statistics
cat("\nProcessing statistical results...\n")

if(nrow(all_stats) > 0) {
    # Add significance levels
    all_stats <- all_stats %>%
        arrange(Level, CellType, adj_p_value) %>%
        mutate(across(where(is.numeric), round, 3)) %>%
        mutate(Significance = ifelse(adj_p_value < 0.001, "***",
                                    ifelse(adj_p_value < 0.01, "**",
                                           ifelse(adj_p_value < 0.05, "*", "ns"))))
    
    # Save complete statistics
    write.csv(all_stats, 
              file.path("stats", "taxonomic_composition_all_levels.csv"), 
              row.names = FALSE)
    cat("  Saved complete statistical results\n")
    
    # Save significant results by taxonomic level
    for(tax_level in tax_levels) {
        sig_stats <- all_stats %>%
            filter(Level == tax_level, adj_p_value < 0.05) %>%
            arrange(CellType, adj_p_value)
        
        filename <- file.path("stats", paste0("significant_taxa_", tolower(tax_level), ".csv"))
        write.csv(sig_stats, filename, row.names = FALSE)
        cat(sprintf("  Saved significant %s results\n", tax_level))
    }
    
    # Print summary by taxonomic level
    cat("\nSummary of significant findings:\n")
    
    for(tax_level in tax_levels) {
        cat(sprintf("\n%s level:\n", tax_level))
        summary_stats <- all_stats %>%
            filter(Level == tax_level, adj_p_value < 0.05) %>%
            group_by(CellType) %>%
            summarise(
                Total_Significant = n(),
                Increased_in_Celiac = sum(log2FoldChange > 0),
                Decreased_in_Celiac = sum(log2FoldChange < 0),
                Mean_Effect_Size = mean(abs(log2FoldChange))
            )
        print(knitr::kable(summary_stats))
    }
}

cat("\nAnalysis complete!\n")
```

#Taxonomic Analysis

```{r}

##USE ps_filtered_prev with this
library(tidyverse)
library(ggplot2)
library(patchwork)
library(cowplot)
library(phyloseq)

# Add CellType to the sample data of ps_filtered_prev
sample_data <- data.frame(sample_data(ps_filtered_prev))

# Create CellType from Sort column
sample_data$CellType <- sapply(as.character(sample_data$Sort), function(x) {
  if(x == "Presort") return("Presort")
  else if(x == "IGneg") return("IGneg")
  else if(x == "IGpos") return("IGpos")
  else return(NA)
})

# Convert CellType to factor with specified order
sample_data$CellType <- factor(sample_data$CellType, levels = c("Presort", "IGpos", "IGneg"))

# Update the sample data in the phyloseq object
sample_data(ps_filtered_prev) <- sample_data(sample_data)

# Function to get abundances at specific taxonomic level
get_level_abundances <- function(ps_obj, tax_level) {
    # Convert to relative abundance
    ps_rel <- transform_sample_counts(ps_obj, function(x) x/sum(x) * 100)
    
    # Agglomerate at specified level
    ps_agg <- tax_glom(ps_rel, taxrank=tax_level, NArm=FALSE)
    
    # Extract abundance matrix
    otu_mat <- as(phyloseq::otu_table(ps_agg), "matrix")
    tax_mat <- as(phyloseq::tax_table(ps_agg), "matrix")
    
    if(taxa_are_rows(ps_agg)) {
        otu_mat <- t(otu_mat)
    }
    
    # Create proper taxonomic labels
    tax_labels <- sapply(1:nrow(tax_mat), function(i) {
        if(!is.na(tax_mat[i, tax_level])) {
            if(tax_level == "Species") {
                genus <- tax_mat[i, "Genus"]
                species <- tax_mat[i, "Species"]
                if(!is.na(genus)) {
                    return(paste(genus, species))
                } else {
                    return(species)
                }
            } else {
                return(tax_mat[i, tax_level])
            }
        } else {
            prev_cols <- 1:which(colnames(tax_mat) == tax_level)
            prev_level_idx <- max(which(!is.na(tax_mat[i, prev_cols])))
            if(is.finite(prev_level_idx)) {
                prev_level_name <- colnames(tax_mat)[prev_level_idx]
                return(paste0("Unclassified_", tax_mat[i, prev_level_name]))
            } else {
                return("Unclassified")
            }
        }
    })
    
    # Make labels unique
    tax_labels <- make.unique(tax_labels, sep="_")
    
    # Create abundance data frame
    abu_df <- as.data.frame(otu_mat)
    colnames(abu_df) <- tax_labels
    
    # Add metadata
    abu_df$Disease.status <- as.character(sample_data(ps_agg)$Disease.status)
    abu_df$CellType <- factor(sample_data(ps_agg)$CellType, levels = c("Presort", "IGpos", "IGneg"))
    
    return(abu_df)
}

# Create output directories
dir.create("plots", showWarnings = FALSE)
dir.create("stats", showWarnings = FALSE)

# Process each taxonomic level
tax_levels <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
all_stats <- data.frame()
plot_list <- list()

for(tax_level in tax_levels) {
    cat(sprintf("\nProcessing %s level...\n", tax_level))
    
    # Get abundance data
    abu_data <- get_level_abundances(ps_filtered_prev, tax_level)
    
    # Get top taxa
    n_top <- if(tax_level %in% c("Phylum", "Class")) 10 else 20
    taxa_cols <- setdiff(colnames(abu_data), c("Disease.status", "CellType"))
    mean_abundance <- colMeans(abu_data[, taxa_cols])
    top_taxa <- names(sort(mean_abundance, decreasing=TRUE))[1:min(n_top, length(mean_abundance))]
    
    # Create plotting data
    plot_data <- abu_data %>%
        dplyr::select(all_of(c(top_taxa, "Disease.status", "CellType"))) %>%
        pivot_longer(cols = all_of(top_taxa),
                    names_to = "Taxon",
                    values_to = "Abundance")
    
    # Perform statistics
    stats_results <- data.frame()
    for(cell_type in levels(abu_data$CellType)) {  # Use levels to maintain order
        for(taxon in top_taxa) {
            cell_data <- abu_data[abu_data$CellType == cell_type, ]
            
            test <- wilcox.test(
                cell_data[cell_data$Disease.status == "Control", taxon],
                cell_data[cell_data$Disease.status == "Celiac", taxon],
                exact = FALSE
            )
            
            ctrl_vals <- cell_data[cell_data$Disease.status == "Control", taxon]
            cel_vals <- cell_data[cell_data$Disease.status == "Celiac", taxon]
            
            stats_results <- rbind(stats_results, data.frame(
                Level = tax_level,
                CellType = cell_type,
                Taxon = taxon,
                p_value = test$p.value,
                Control_median = median(ctrl_vals),
                Celiac_median = median(cel_vals),
                log2FoldChange = log2((median(cel_vals) + 1e-10)/(median(ctrl_vals) + 1e-10))
            ))
        }
    }
    
    # Add FDR correction
    stats_results$adj_p_value <- p.adjust(stats_results$p_value, method="BH")
    stats_results$Significance <- ifelse(stats_results$adj_p_value < 0.001, "***",
                                       ifelse(stats_results$adj_p_value < 0.01, "**",
                                              ifelse(stats_results$adj_p_value < 0.05, "*", "ns")))
    
    all_stats <- rbind(all_stats, stats_results)
    
    # Create plots for each cell type
    for(cell_type in levels(plot_data$CellType)) {  # Use levels to maintain order
        # Filter data for this cell type
        cell_data <- plot_data %>%
            dplyr::filter(CellType == cell_type)
        
        # Get y-positions for annotations
        y_positions <- cell_data %>%
            dplyr::group_by(Taxon) %>%
            dplyr::summarise(y_pos = max(Abundance) * 1.1)
        
        # Get significance values
        sig_values <- stats_results %>%
            dplyr::filter(CellType == cell_type) %>%
            dplyr::select(Taxon, Significance)
        
        # Combine position and significance
        annotations <- y_positions %>%
            dplyr::left_join(sig_values, by = "Taxon")
        
        # Create plot
        p <- ggplot(cell_data, aes(x = Disease.status, y = Abundance)) +
            geom_violin(aes(fill = Disease.status), alpha = 0.7, trim = FALSE) +
            geom_boxplot(width = 0.2, alpha = 0.7) +
            geom_jitter(width = 0.2, size = 0.5, alpha = 0.5) +
            facet_wrap(~Taxon, scales = "free_y", 
                      ncol = if(tax_level %in% c("Phylum", "Class")) 3 else 4) +
            scale_fill_manual(values = c("Control" = "#00AED7", "Celiac" = "#FD9347")) +
            theme_bw() +
            theme(axis.text.x = element_text(angle = 45, hjust = 1),
                  strip.text = element_text(size = 8),
                  legend.position = "top",
                  plot.title = element_text(size = 12, face = "bold"),
                  axis.title = element_text(size = 10),
                  panel.grid.minor = element_blank()) +
            labs(title = paste(cell_type, "-", tax_level, "Level Distribution"),
                 x = "Disease Status",
                 y = "Relative Abundance (%)")
        
        # Add significance annotations
        p <- p + geom_text(data = annotations,
                          aes(x = 1.5, y = y_pos, label = Significance),
                          size = 3,
                          inherit.aes = FALSE)
        
        plot_list[[paste(cell_type, tax_level)]] <- p
    }
    
    # Create combined plot for this level using the correct order
    combined_plot <- plot_list[[paste("Presort", tax_level)]] / 
                    plot_list[[paste("IGpos", tax_level)]] / 
                    plot_list[[paste("IGneg", tax_level)]] +
        plot_layout(guides = "collect") +
        plot_annotation(
            title = paste("Distribution at", tax_level, "Level"),
            subtitle = "Mann-Whitney test significance: * p<0.05, ** p<0.01, *** p<0.001",
            theme = theme(
                plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
                plot.subtitle = element_text(size = 10, hjust = 0.5)
            )
        )
    
    # Save plot in plots directory
    ggsave(file.path("plots", paste0("taxa_distributions_", tolower(tax_level), ".pdf")),
           combined_plot,
           width = 20,
           height = 25,
           dpi = 300)
}

# Save all statistics in stats directory
write.csv(all_stats, 
          file.path("stats", "taxonomic_analysis_all_levels.csv"), 
          row.names = FALSE)

# Print summary for each level
for(tax_level in tax_levels) {
    cat(sprintf("\nSummary for %s level:\n", tax_level))
    
    level_summary <- all_stats %>%
        dplyr::filter(Level == tax_level, adj_p_value < 0.05) %>%
        dplyr::group_by(CellType) %>%
        dplyr::summarise(
            Total_Significant = n(),
            Increased_in_Celiac = sum(log2FoldChange > 0),
            Decreased_in_Celiac = sum(log2FoldChange < 0)
        )
    
    print(knitr::kable(level_summary))
}
```

#PCA and PCOA Analysis

```{r}
# Load required libraries
library(phyloseq)
library(ggplot2)
library(vegan)
library(dplyr)

# Define color schemes
control_color <- "#00AED7"  # Light blue
celiac_color <- "#FD9347"   # Orange

# Function to perform ordination analysis for a specific comparison
perform_ordination_analysis <- function(ps, group1, group2, type = "PCA", output_prefix) {
  # Filter samples for the specific comparison
  subset_samples <- sample_data(ps)$Group %in% c(group1, group2)
  ps_subset <- prune_samples(subset_samples, ps)
  
  # Create a simplified group designation
  sample_data(ps_subset)$SimpleGroup <- factor(
    ifelse(grepl("Control", sample_data(ps_subset)$Group), "Control", "Celiac"),
    levels = c("Control", "Celiac")
  )
  
  # Transform counts to relative abundance
  ps_rel <- transform_sample_counts(ps_subset, function(x) x/sum(x))
  
  if(type == "PCA") {
    # Perform PCA
    ord <- ordinate(ps_rel, method = "RDA", distance = "euclidean")
    
    # Create PCA plot
    p <- plot_ordination(ps_rel, ord, color = "SimpleGroup") +
      geom_point(size = 3) +
      stat_ellipse(type = "norm") +
      scale_color_manual(values = c(Control = control_color, Celiac = celiac_color)) +
      ggtitle(paste("PCA -", sub("_.*", "", group1), "Comparison")) +
      theme_bw() +
      theme(
        plot.title = element_text(hjust = 0.5, size = 14),
        legend.title = element_text(size = 12),
        legend.text = element_text(size = 10)
      )
    
  } else {  # PCoA
    # Calculate Bray-Curtis distances and perform PCoA
    ord <- ordinate(ps_rel, method = "PCoA", distance = "bray")
    
    # Create PCoA plot
    p <- plot_ordination(ps_rel, ord, color = "SimpleGroup") +
      geom_point(size = 3) +
      stat_ellipse(type = "norm") +
      scale_color_manual(values = c(Control = control_color, Celiac = celiac_color)) +
      ggtitle(paste("PCoA -", sub("_.*", "", group1), "Comparison")) +
      theme_bw() +
      theme(
        plot.title = element_text(hjust = 0.5, size = 14),
        legend.title = element_text(size = 12),
        legend.text = element_text(size = 10)
      )
  }
  
  # Save plot
  filename <- paste0(output_prefix, "_", sub("_.*", "", group1), "_comparison.pdf")
  ggsave(filename, p, width = 8, height = 6)
  
  # Perform PERMANOVA
  otu_mat <- t(otu_table(ps_rel)@.Data)
  metadata <- data.frame(sample_data(ps_rel))
  dist_mat <- vegdist(otu_mat, method = "bray")
  
  perm_result <- adonis2(dist_mat ~ SimpleGroup, data = metadata)
  
  # Save PERMANOVA results
  write.csv(perm_result, 
            paste0(output_prefix, "_PERMANOVA_", sub("_.*", "", group1), "_comparison.csv"))
  
  return(list(plot = p, permanova = perm_result))
}

# Perform analyses for each comparison
# 1. Presort comparison
presort_groups <- c("Presort_Control_1", "Presort_Celiac_1")
pca_presort <- perform_ordination_analysis(ps, presort_groups[1], presort_groups[2], 
                                           "PCA", "ordination_pca")
pcoa_presort <- perform_ordination_analysis(ps, presort_groups[1], presort_groups[2], 
                                            "PCoA", "ordination_pcoa")

# 2. IGpos comparison
igpos_groups <- c("IGpos_Control_1", "IGpos_Celiac_1")
pca_igpos <- perform_ordination_analysis(ps, igpos_groups[1], igpos_groups[2], 
                                         "PCA", "ordination_pca")
pcoa_igpos <- perform_ordination_analysis(ps, igpos_groups[1], igpos_groups[2], 
                                          "PCoA", "ordination_pcoa")

# 3. IGneg comparison
igneg_groups <- c("IGneg_Control_1", "IGneg_Celiac_1")
pca_igneg <- perform_ordination_analysis(ps, igneg_groups[1], igneg_groups[2], 
                                         "PCA", "ordination_pca")
pcoa_igneg <- perform_ordination_analysis(ps, igneg_groups[1], igneg_groups[2], 
                                          "PCoA", "ordination_pcoa")

# Create combined plots for publication
library(gridExtra)

# Combine PCA plots
combined_pca <- grid.arrange(
  pca_presort$plot + ggtitle("Presort"),
  pca_igpos$plot + ggtitle("IG+"),
  pca_igneg$plot + ggtitle("IG-"),
  ncol = 3
)
ggsave("combined_pca_plots.pdf", combined_pca, width = 18, height = 6)

# Combine PCoA plots
combined_pcoa <- grid.arrange(
  pcoa_presort$plot + ggtitle("Presort"),
  pcoa_igpos$plot + ggtitle("IG+"),
  pcoa_igneg$plot + ggtitle("IG-"),
  ncol = 3
)
ggsave("combined_pcoa_plots.pdf", combined_pcoa, width = 18, height = 6)

# Save all PERMANOVA results in a single file
all_permanova <- list(
  Presort = pca_presort$permanova,
  IGpos = pca_igpos$permanova,
  IGneg = pca_igneg$permanova
)

write.csv(do.call(rbind, lapply(names(all_permanova), function(name) {
  data.frame(
    Comparison = name,
    all_permanova[[name]]
  )
})), "all_permanova_results.csv")

```

### LEFSE ANALYSIS
```{r}
# Load required libraries
suppressPackageStartupMessages({
  library(phyloseq)
  library(MicrobiotaProcess)
  library(tidyverse)
  library(ggplot2)
  library(gridExtra)
})

# Set up color scheme
group_colors <- c(
  "Control" = "#00AED7",
  "Celiac" = "#FD9347"
)

# Create output directories
dir.create("lefse_results", showWarnings = FALSE)
dir.create("lefse_plots", showWarnings = FALSE)

# Process each cell type
cell_types <- c("Presort", "IGpos", "IGneg")

# Initialize an empty list to store results
all_cell_results <- list()

# Function to process differential analysis results
process_diff_analysis <- function(deres, cell_type) {
  if (!is.null(deres) && nrow(data.frame(deres)) > 0) {
    # Convert deres to data frame and add cell type
    diff_table <- data.frame(deres)
    diff_table$CellType <- cell_type
    
    # Create differential abundance boxplot
    tryCatch({
      p1 <- ggdiffbox(deres, 
                      box_notch = FALSE) +
        scale_fill_manual(values = group_colors) +
        scale_color_manual(values = group_colors) +
        theme_bw() +
        labs(title = paste(cell_type, "- Differential Features")) +
        theme(axis.text.y = element_text(size = 8))
      
      ggsave(paste0("lefse_plots/", tolower(cell_type), "_diffbox.pdf"),
             p1, width = 10, height = 8)
    }, error = function(e) {
      warning(sprintf("Error creating boxplot for %s: %s", cell_type, e$message))
    })
    
    # Create cladogram
    tryCatch({
      p2 <- ggdiffclade(deres, 
                        alpha = 0.3,
                        linewd = 0.15,
                        skpointsize = 0.6,
                        layout = "radial",
                        taxlevel = 3,
                        removeUnknown = TRUE,
                        reduce = TRUE) +
        scale_fill_manual(values = group_colors) +
        scale_color_manual(values = group_colors)
      
      ggsave(paste0("lefse_plots/", tolower(cell_type), "_cladogram.pdf"),
             p2, width = 12, height = 12)
    }, error = function(e) {
      warning(sprintf("Error creating cladogram for %s: %s", cell_type, e$message))
    })
    
    return(diff_table)
  }
  return(NULL)
}

# Main analysis loop
for (cell_type in cell_types) {
  cat(sprintf("\nProcessing differential analysis for %s...\n", cell_type))
  
  # Subset data for cell type
  ps_subset <- tryCatch({
    subset_samples(ps_rel, CellType == cell_type)
  }, error = function(e) {
    cat(sprintf("Error subsetting data for %s: %s\n", cell_type, e$message))
    return(NULL)
  })
  
  if (is.null(ps_subset)) next
  
  # Run differential analysis
  deres <- tryCatch({
    diff_analysis(ps_subset, 
                  classgroup = "Disease.status",
                  mlfun = "lda",
                  filtermod = "pvalue",
                  firstcomfun = "kruskal_test",
                  firstalpha = 0.05,
                  strictmod = FALSE,
                  secondcomfun = "wilcox_test",
                  subclmin = 3,
                  subclwilc = FALSE,
                  secondalpha = 0.05,
                  lda = 2)
  }, error = function(e) {
    cat(sprintf("Error in differential analysis for %s: %s\n", cell_type, e$message))
    return(NULL)
  })
  
  # Process results
  if (!is.null(deres)) {
    results <- process_diff_analysis(deres, cell_type)
    if (!is.null(results)) {
      all_cell_results[[cell_type]] <- results
      
      # Save individual results
      saveRDS(deres, file = paste0("lefse_results/", tolower(cell_type), "_lefse_results.rds"))
      write.csv(results,
                paste0("lefse_results/", tolower(cell_type), "_results.csv"),
                row.names = FALSE)
    }
  } else {
    cat(sprintf("No significant results found for %s\n", cell_type))
  }
}

# Process combined results
if (length(all_cell_results) > 0) {
  # Combine all results into one dataframe
  all_results <- bind_rows(all_cell_results)
  
  # Save combined summary
  write.csv(all_results,
            "lefse_results/combined_lefse_summary.csv",
            row.names = FALSE)
  
  # Print available columns
  cat("\nAvailable columns in the dataset:\n")
  print(names(all_results))
  
  # Create summary statistics
  summary_table <- all_results %>%
    group_by(CellType) %>%
    summarise(
      Total_Features = n(),
      Features_in_Control = sum(Disease.status == "Control", na.rm = TRUE),
      Features_in_Celiac = sum(Disease.status == "Celiac", na.rm = TRUE),
      Mean_LDA_Score = mean(LDAmean, na.rm = TRUE),
      Mean_FDR = mean(fdr, na.rm = TRUE)
    )
  
  # Save summary statistics
  write.csv(summary_table,
            "lefse_results/summary_statistics.csv",
            row.names = FALSE)
  
  # Print top features for each cell type
  cat("\nTop features by LDA score for each cell type:\n")
  for (ct in unique(all_results$CellType)) {
    cat(sprintf("\n%s:\n", ct))
    
    tryCatch({
      # Filter for this cell type
      ct_data <- all_results %>%
        filter(CellType == ct) %>%
        arrange(desc(abs(LDAmean)))
      
      # Select columns that exist
      cols_to_select <- c("f", "Disease.status", "LDAmean", "pvalue", "fdr")
      cols_present <- intersect(cols_to_select, names(ct_data))
      
      # Select top 10 features
      top_features <- ct_data %>%
        select(!!!syms(cols_present)) %>%
        head(10)
      
      if(nrow(top_features) > 0) {
        # Format the output for better readability
        formatted_features <- top_features %>%
          mutate(
            LDAmean = round(LDAmean, 3),
            pvalue = format.pval(pvalue, digits = 3),
            fdr = format.pval(fdr, digits = 3)
          )
        
        print(formatted_features)
      } else {
        cat("No features found.\n")
      }
    }, error = function(e) {
      cat(sprintf("Error processing top features for %s: %s\n", ct, e$message))
    })
  }
  
  # Create visualization plots
  tryCatch({
    # Summary plot
    summary_plot <- ggplot(all_results, 
                           aes(x = reorder(f, LDAmean),
                               y = LDAmean,
                               fill = Disease.status)) +
      geom_bar(stat = "identity") +
      facet_wrap(~CellType, scales = "free_y") +
      coord_flip() +
      theme_bw() +
      theme(axis.text.y = element_text(size = 8)) +
      labs(x = "Features",
           y = "LDA Score",
           title = "Differential Analysis Summary",
           fill = "Disease Status") +
      scale_fill_manual(values = group_colors)
    
    ggsave("lefse_plots/combined_summary.pdf", 
           summary_plot, width = 12, height = 8)
    
    # Volcano plots for each cell type
    for (ct in unique(all_results$CellType)) {
      p_volcano <- all_results %>%
        filter(CellType == ct) %>%
        ggplot(aes(x = LDAmean, y = -log10(fdr))) +
        geom_point(aes(color = Disease.status), alpha = 0.6) +
        geom_vline(xintercept = 0, linetype = "dashed") +
        geom_hline(yintercept = -log10(0.05), linetype = "dashed") +
        scale_color_manual(values = group_colors) +
        theme_bw() +
        labs(title = paste(ct, "- Volcano Plot"),
             x = "LDA Score",
             y = "-log10(FDR)")
      
      ggsave(paste0("lefse_plots/", tolower(ct), "_volcano.pdf"),
             p_volcano, width = 8, height = 6)
    }
    
    # FDR distribution plot
    p_fdr <- ggplot(all_results, aes(x = fdr, fill = Disease.status)) +
      geom_histogram(position = "dodge", bins = 30, alpha = 0.7) +
      facet_wrap(~CellType) +
      scale_fill_manual(values = group_colors) +
      theme_bw() +
      labs(title = "FDR Distribution",
           x = "FDR",
           y = "Count")
    
    ggsave("lefse_plots/fdr_distribution.pdf", 
           p_fdr, width = 10, height = 6)
    
  }, error = function(e) {
    cat(sprintf("Error creating visualization plots: %s\n", e$message))
  })
  
  # Print statistical insights
  cat("\nStatistical Insights:\n")
  for (ct in unique(all_results$CellType)) {
    cat(sprintf("\n%s:\n", ct))
    
    # Get subset for this cell type
    ct_data <- all_results %>%
      filter(CellType == ct)
    
    # Number of significant features (with more detailed info)
    sig_features <- ct_data %>%
      filter(fdr < 0.05) %>%
      nrow()
    
    # Mean LDA score
    mean_lda <- mean(abs(ct_data$LDAmean), na.rm = TRUE)
    
    # Distribution between groups for significant features
    sig_dist <- ct_data %>%
      filter(fdr < 0.05) %>%
      count(Disease.status) %>%
      spread(Disease.status, n, fill = 0)
    
    cat(sprintf("- Significant features (FDR < 0.05): %d\n", sig_features))
    cat(sprintf("- Mean absolute LDA score: %.2f\n", mean_lda))
    cat("- Distribution of significant features:\n")
    if(nrow(sig_dist) > 0) {
      print(sig_dist)
    } else {
      cat("  No significant features found\n")
    }
    
    # Add additional statistics
    cat("\nTop 5 features by LDA score:\n")
    ct_data %>%
      arrange(desc(abs(LDAmean))) %>%
      select(f, LDAmean, pvalue, fdr) %>%
      head(5) %>%
      mutate(across(where(is.numeric), round, 3)) %>%
      print()
  }
} else {
  cat("\nNo results were generated for any cell type.\n")
}

cat("\nDifferential analysis complete. Results are saved in 'lefse_results' and 'lefse_plots' directories.\n")

```

### PICRUST ANALYSIS
```{r}
# Install if BiocManager is not present
if (!requireNamespace("BiocManager", quietly = TRUE)) {
  install.packages("BiocManager")
}

# Install required packages if they are not already installed
if (!require("dada2")) BiocManager::install("dada2")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("limma")) BiocManager::install("limma")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")

# Load required libraries
library(dada2)
library(tidyverse)
library(limma)
library(ggplot2)
library(dplyr)

# Set working directory 
setwd("D:/CD/picrust_general_folder")

# Load custom functions
source("D:/CD/picrust_general_folder/fcns/fcns_limma/limma_contrasts.r")
source("D:/CD/picrust_general_folder/fcns/fcns_limma/multiTopTab.r")
source("D:/CD/picrust_general_folder/fcns/fcns_limma/my_toptab.r")
source("D:/CD/picrust_general_folder/fcns/fcns_limma/logfc2fc.r")
source("D:/CD/picrust_general_folder/fcns/ezheat.r")
source("D:/CD/picrust_general_folder/fcns/prune_mat.r")

# Read metadata
md <- read.csv("data/CeD new label (2).csv")
md_age <- read.csv("data/Celiakibarn 190906.csv")
md <- merge(md, md_age, all = TRUE)
rm(md_age)

# Process metadata
md <- md[order(md$New.Sample.ID), ]
md <- md[rep(1:nrow(md), each = 3),]
md$New.Sample.ID <- paste0("S", md$New.Sample.ID, c("", ".neg", ".pos"))
md$Sort <- rep(c("Presort", "IGneg", "IGpos"), time = nrow(md)/3)
md$Disease.status <- sapply(md$Disease.status, FUN = switch, A = "Celiac", B = "Control")
md$ABIS.no <- paste0("ABIS", md$ABIS.no)

# Factor setup
md$Disease.status <- factor(md$Disease.status, levels = c("Control", "Celiac"))
md$Sorted <- md$Sort <- factor(md$Sort, levels = c("Presort", "IGneg", "IGpos"))
levels(md$Sorted) <- list(Presort = "Presort", Postsort = c("IGneg", "IGpos"))
md <- md[order(md$Sort, md$Disease.status, md$Age, md$ABIS.no), ]
md$Group <- paste(md$Sort, md$Disease.status, md$Age, sep = "_")
md$Group <- factor(md$Group, levels = unique(md$Group))
md$Age <- factor(paste0(md$Age, "year"))
md <- data.frame(md, row.names = "New.Sample.ID")

# Read pathway data
pwys.tab <- read.delim("KEGG_pathways_out/path_abun_unstrat.tsv.gz", row.names = 1)
grp <- gsub("\\.[1-2]$", "", gsub("\\.[1-2]\\.", ".", colnames(pwys.tab)))
pwys.tab <- t(rowsum(t(pwys.tab), group = grp))
rm(grp)

# Match samples
nms <- intersect(rownames(md), colnames(pwys.tab))
pwys.tab <- pwys.tab[, nms]
md <- md[nms, ]

# Read pathway annotations
annot <- read.delim("annotations/kegg/pathway_id/KEGG_pathways_info.tsv.gz", row.names = 1, header = FALSE)
colnames(annot) <- "Pathway"

# Filter and transform data
pwys.tab <- pwys.tab[rowSums(pwys.tab >= 10) > 5, ]
pwys.tab <- log2(pwys.tab + 1)

# Create diagnostic plots
pdf("diagnostic_plots.pdf")
boxplot(pwys.tab, main="Boxplot of pathway abundances")
hist(pwys.tab, main="Histogram of pathway abundances")
dev.off()

# Save processed data
save(pwys.tab, md, annot, file = "kegg_pwys.rda")

# Define contrasts
contr.v <- c(
  Celiac_vs_Control_in_Presort_Age1 = "Presort_Celiac_1 - Presort_Control_1",
  Celiac_vs_Control_in_IGneg_Age1 = "IGneg_Celiac_1 - IGneg_Control_1",
  Celiac_vs_Control_in_IGpos_Age1 = "IGpos_Celiac_1 - IGpos_Control_1", 
  IGpos_vs_IGneg_in_Control_Age1 = "IGpos_Control_1 - IGneg_Control_1",  
  IGpos_vs_IGneg_in_Celiac_Age1 = "IGpos_Celiac_1 - IGneg_Celiac_1",
  
  Celiac_vs_Control_in_Presort_Age2.5 = "Presort_Celiac_2.5 - Presort_Control_2.5",
  Celiac_vs_Control_in_IGneg_Age2.5 = "IGneg_Celiac_2.5 - IGneg_Control_2.5",
  Celiac_vs_Control_in_IGpos_Age2.5 = "IGpos_Celiac_2.5 - IGpos_Control_2.5", 
  IGpos_vs_IGneg_in_Control_Age2.5 = "IGpos_Control_2.5 - IGneg_Control_2.5",  
  IGpos_vs_IGneg_in_Celiac_Age2.5 = "IGpos_Celiac_2.5 - IGneg_Celiac_2.5",
  
  Celiac_vs_Control_in_Presort_Age5 = "Presort_Celiac_5 - Presort_Control_5",
  Celiac_vs_Control_in_IGneg_Age5 = "IGneg_Celiac_5 - IGneg_Control_5",
  Celiac_vs_Control_in_IGpos_Age5 = "IGpos_Celiac_5 - IGpos_Control_5", 
  IGpos_vs_IGneg_in_Control_Age5 = "IGpos_Control_5 - IGneg_Control_5",  
  IGpos_vs_IGneg_in_Celiac_Age5 = "IGpos_Celiac_5 - IGneg_Celiac_5"
)

# Differential analysis using Mann-Whitney U test (non-parametric alternative to t-test)
# Initialize a list to store results for each contrast
results_list <- list()

# Loop over each contrast to perform the Mann-Whitney U test
for (i in seq_along(contr.v)) {
  contrast_name <- names(contr.v)[i]
  contrast <- contr.v[i]
  
  # Parse the contrast to extract group labels
  groups <- unlist(strsplit(contrast, " - "))
  group1 <- groups[1]
  group2 <- groups[2]
  
  # Get sample indices for each group based on metadata
  idx1 <- which(md$Group == group1)
  idx2 <- which(md$Group == group2)
  
  # Initialize vectors to store test results
  pathway <- rownames(pwys.tab)
  mean1 <- numeric(length(pathway))
  mean2 <- numeric(length(pathway))
  mean_diff <- numeric(length(pathway))
  p_value <- numeric(length(pathway))
  stat_value <- numeric(length(pathway))
  
  # Loop over each pathway to perform the test
  for (j in seq_along(pathway)) {
    pathway_j <- pathway[j]
    values1 <- pwys.tab[pathway_j, idx1]
    values2 <- pwys.tab[pathway_j, idx2]
    
    # Check if both groups have at least one observation
    if (length(values1) > 0 && length(values2) > 0) {
      # Perform the Mann-Whitney U test
      wt <- wilcox.test(values1, values2, exact = FALSE)
      p_value[j] <- wt$p.value
      stat_value[j] <- wt$statistic
    } else {
      # Set p-value and statistic to NA
      p_value[j] <- NA
      stat_value[j] <- NA
    }
    
    # Compute mean differences between groups
    mean1[j] <- mean(values1)
    mean2[j] <- mean(values2)
    mean_diff[j] <- mean1[j] - mean2[j]
  }
  
  # Adjust p-values for multiple testing using FDR
  adj_p_value <- p.adjust(p_value, method = "fdr")
  
  # Create a data frame for this contrast
  df_contrast <- data.frame(
    Pathway = pathway,
    Contrast = contrast_name,
    Group1 = group1,
    Group2 = group2,
    Mean_Group1 = mean1,
    Mean_Group2 = mean2,
    Mean_Difference = mean_diff,
    Statistic = stat_value,
    P.Value = p_value,
    adj.P.Val = adj_p_value
  )
  
  # Add the results to the list
  results_list[[contrast_name]] <- df_contrast
}

# Combine results from all contrasts into a single data frame
mtt.df <- do.call(rbind, results_list)

# Add pathway annotations
mtt.df <- merge(mtt.df, annot, by.x = "Pathway", by.y = "row.names", all.x = TRUE)

# Round numeric columns for better readability
numeric_cols <- sapply(mtt.df, is.numeric)
mtt.df[, numeric_cols] <- signif(mtt.df[, numeric_cols], 3)

# Save results to CSV
write.csv(mtt.df, "kegg_pwys_stats.csv", row.names = FALSE, na = "")

# Select top pathways based on adjusted p-values for "Presort" contrasts
library(dplyr)
top_contrasts_presort <- names(contr.v)[grep("Presort", names(contr.v))]
mtt.df_presort <- mtt.df %>% filter(Contrast %in% top_contrasts_presort)
pwy_pvals_presort <- mtt.df_presort %>%
  group_by(Pathway) %>%
  summarise(min_adj_P_Val = min(adj.P.Val, na.rm = TRUE)) %>%
  arrange(min_adj_P_Val)
# Select top 30 pathways
top_pwy_presort <- pwy_pvals_presort$Pathway[1:30]

# Presort boxplots for top pathways
pdf("top_kegg_pwys_boxplot_presort.pdf", width=9, height=3)
for (pwy in top_pwy_presort) {
  dat2p <- data.frame(
    logabun = pwys.tab[pwy, md$Sort == "Presort"], 
    md[md$Sort == "Presort", ]
  )
  
  ggp <- ggplot(dat2p, aes(x = Disease.status, y = logabun)) + 
    theme_bw() +
    ggtitle(substr(annot[pwy, "Pathway"], 1, 80)) + 
    theme(legend.position = "none") + 
    ylab("Log2 abundance") +
    geom_boxplot(aes(fill = Disease.status)) + 
    facet_grid(~ Age)
  print(ggp)
}
dev.off()

# Create heatmaps for top pathways in Presort samples
source("fcns/ezheat.R")  # Make sure this file exists
source("fcns/prune_mat.R")
md.df_presort <- md[md$Sort == "Presort", c("Disease.status", "Age")]
gaps.col_presort <- which(diff(as.numeric(as.factor(md.df_presort$Age)), lag=1) != 0)

ezheat(pwys.tab[top_pwy_presort, md$Sort == "Presort"], 
       pheno.df = md.df_presort,  
       sc = "z", 
       reorder_rows = TRUE,
       labrows = substr(annot[top_pwy_presort, "Pathway"], 1, 80), 
       labcols = "",
       gaps_col = gaps.col_presort, 
       main = "Log2 abundance", 
       name = "top_kegg_pwys_heat_presort", 
       height = 8, 
       width = 16, 
       clip = 2)

# Select top pathways based on adjusted p-values for "Postsort" contrasts
top_contrasts_postsort <- names(contr.v)[grep("IGneg|IGpos", names(contr.v))]
mtt.df_postsort <- mtt.df %>% filter(Contrast %in% top_contrasts_postsort)
pwy_pvals_postsort <- mtt.df_postsort %>%
  group_by(Pathway) %>%
  summarise(min_adj_P_Val = min(adj.P.Val, na.rm = TRUE)) %>%
  arrange(min_adj_P_Val)
# Select top 30 pathways
top_pwy_postsort <- pwy_pvals_postsort$Pathway[1:30]

# Postsort boxplots for top pathways
pdf("top_kegg_pwys_boxplot_postsort.pdf", width=9, height=3)
for (pwy in top_pwy_postsort) {
  # Subset data for Postsort samples (IGneg and IGpos)
  dat2p <- data.frame(
    logabun = pwys.tab[pwy, md$Sorted == "Postsort"], 
    md[md$Sorted == "Postsort", ]
  )
  
  # Create the boxplot
  ggp <- ggplot(dat2p, aes(x = Sort, y = logabun, fill = Sort)) + 
    theme_bw() +
    ggtitle(substr(annot[pwy, "Pathway"], 1, 80)) + 
    ylab("Log2 abundance") +
    geom_boxplot() + 
    facet_grid(Disease.status ~ Age)
  print(ggp)
}
dev.off()

# Create heatmaps for top pathways in Postsort samples
md.df_postsort <- md[md$Sorted == "Postsort", c("Sort", "Disease.status", "Age")]
gaps.col_postsort <- which(diff(as.numeric(as.factor(md.df_postsort$Age)), lag=1) != 0)

ezheat(pwys.tab[top_pwy_postsort, md$Sorted == "Postsort"], 
       pheno.df = md.df_postsort,  
       sc = "z", 
       reorder_rows = TRUE,
       labrows = substr(annot[top_pwy_postsort, "Pathway"], 1, 80), 
       labcols = "",
       gaps_col = gaps.col_postsort, 
       main = "Log2 abundance", 
       name = "top_kegg_pwys_heat_postsort", 
       height = 8, 
       width = 16, 
       clip = 2)


```




# Session Info

```{r session_info}
sessionInfo()
```
